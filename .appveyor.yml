# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 1.0.{build}

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# branches to build
branches:
  # whitelist
  only:
    - master

# Maximum number of concurrent jobs for the project
max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2015

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.safecrlf false

# set clone depth
clone_depth: 5                      # clone entire repository history if not defined

# scripts that run after cloning repository
install:
  # by default, all script lines are interpreted as batch
  - ps: 'Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version'
  # to run script as a PowerShell command prepend it with ps:
  - ps: $PSVersionTable

  - ps: 'Install-Module -Name Pester -Force'
  - ps: 'Get-Module -Name Pester -ListAvailable | fl Name,Version'
  - choco install nssm -y
  - ps: 'Get-Command -Name nssm | fl'

#---------------------------------#
#       build configuration       #
#---------------------------------#

# scripts to run before build
before_build:
  - ps: |
      $nuspecFile = '.\poshservice.template.nuspec'
      (Get-Content -Path $nuspecFile -Raw) -replace '<version>(.+)</version>', "<version>`$1.$($env:APPVEYOR_BUILD_NUMBER)</version>" | Out-File -FilePath $nuspecFile

# to run your custom scripts instead of automatic MSBuild
build_script:
  - choco pack poshservice.template.nuspec

# scripts to run after build (working directory and environment changes are persisted from the previous steps)
after_build:

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
before_package:

# to disable automatic builds
#build: off

#---------------------------------#
#       tests configuration       #
#---------------------------------#

# scripts to run before tests (working directory and environment changes are persisted from the previous steps such as "before_build")
before_test:

# to run your custom scripts instead of automatic tests
test_script:
  - ps: '.\pester_tests.ps1'

# scripts to run after tests
after_test:

# to disable automatic tests
#test: off


#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:
  # pushing all *.nupkg files in build directory recursively
  - path: '**\*.nupkg'

# on successful build
on_success:

# on build failure
on_failure:

# after build failure or success
on_finish:

